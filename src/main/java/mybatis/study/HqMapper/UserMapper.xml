<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 为这个mapper指定一个唯一的namespace，
namespace的值习惯上设置成包名+sql映射文件名，
这样就能够保证namespace的值是唯一的
例如namespace="mybatis.study.HqMapper.UserMapper"
就是mybatis.study.HqMapper.UserMapper.xml文件去除后缀)
 -->

<mapper namespace="mybatis.study.HqMapper.UserMapper">

    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
  使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
  resultType="mybatis.study.User"就表示将查询结果封装成一个User类的对象返回
  User类就是users表所对应的实体类
  -->

    <select id="getUser" parameterType="mybatis.study.User" resultType="mybatis.study.User">
        SELECT * FROM  User WHERE userId = #{userId}
    </select>

    <!--查询的结果每一行为List中的一个map，列名为key,结果数据为value。-->
    <select id="getAllUser" resultType="java.util.Map">
        SELECT * FROM User;
    </select>

    <insert id="insertUser" parameterType="mybatis.study.User">
        INSERT INTO User (userId,username) VALUES (#{userId},#{username})
    </insert>

    <update id="updateUser" parameterType="mybatis.study.User">
        update user set username = #{username}, password = #{password}
        where userId = #{userId};
    </update>

    <update id="deleteUser" parameterType="mybatis.study.User">
        DELETE FROM User WHERE userId = #{userId};
    </update>

</mapper>